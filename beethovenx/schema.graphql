type MasterChef @entity {
  id: Bytes!
  emissionToken: Token!
  emissionPerBlock: BigInt!
  totalAllocPoint: BigInt!
  farms: [Farm!] @derivedFrom(field: "masterChef")
  poolCount: BigInt!
  timestamp: BigInt!
  block: BigInt!

}

type Farm @entity {
  # Index of pool in poolInfo on MasterChef contract
  id: Bytes!
  masterChef: MasterChef!
  token: Token!
  allocPoint: BigInt!
  balance: BigDecimal!
  rewarder: Rewarder
  users: [UserFarmBalance!]! @derivedFrom(field: "farm")
  userCount: BigInt!
  timestamp: BigInt!
  block: BigInt!
}

type RewardToken @entity {
  id: Bytes!
  token: Token!
  rewarder: Rewarder
  rewardPerSecond: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
}

type Token @entity(immutable: true) {
  id: Bytes!
  name: String!
  decimals: Int!
  symbol: String!
}

type Rewarder @entity(immutable: true) {
  # address
  id: Bytes!
  rewardTokens: [RewardToken!]! @derivedFrom(field: "rewarder")
}

type HarvestAction @entity(immutable: true) {
  id: Bytes!
  user: User
  token: Token!
  amount: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
}

type UserFarmBalance @entity {
  id: Bytes!
  user: User!
  farm: Farm!
  balance: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
}

type User @entity(immutable: true) {
  # Pool id concatenated with user address
  id: Bytes!
  address: Bytes!
  farms: [UserFarmBalance!]! @derivedFrom(field: "user")
  governance: UserGovernanceTokenBalance @derivedFrom(field: "user")
  harvests: [HarvestAction!]! @derivedFrom(field: "user")
}

type UserGovernanceTokenBalance @entity {
  id: Bytes!
  user: User!
  token: GovernanceToken!
  balance: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
}

type GovernanceToken @entity {
  id: Bytes!
  token: Token!
  vestingToken: Token!
  totalSupply: BigDecimal!
  ratio: BigDecimal!
  sharesMinted: BigDecimal!
  sharesBurned: BigDecimal!
  vestingTokenBalance: BigDecimal!
  sharedVestingTokenRevenue: BigDecimal!
  users: [UserGovernanceTokenBalance!]! @derivedFrom(field: "token")
  block: BigInt!
  timestamp: BigInt!
}
